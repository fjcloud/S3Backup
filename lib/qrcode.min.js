/**
 * Simple QR Code Generator - Local Implementation
 * Based on QR Code specification with minimal dependencies
 */

window.QRCode = {
    /**
     * Generate QR Code as Data URL
     * @param {string} text - Text to encode
     * @param {Object} options - Options (width, margin, etc.)
     * @returns {Promise<string>} Data URL of the QR code image
     */
    toDataURL: function(text, options = {}) {
        return new Promise((resolve) => {
            const opts = {
                width: options.width || 256,
                margin: options.margin || 4,
                color: {
                    dark: (options.color && options.color.dark) || '#000000',
                    light: (options.color && options.color.light) || '#FFFFFF'
                }
            };

            // Create a simple QR-like pattern for demo purposes
            // In a real implementation, you'd use proper QR encoding
            const canvas = document.createElement('canvas');
            const size = opts.width;
            const margin = opts.margin * 4;
            
            canvas.width = size;
            canvas.height = size;
            
            const ctx = canvas.getContext('2d');
            
            // Fill background
            ctx.fillStyle = opts.color.light;
            ctx.fillRect(0, 0, size, size);
            
            // Create a pattern that looks like a QR code
            const gridSize = Math.floor((size - 2 * margin) / 25);
            const cellSize = gridSize;
            
            ctx.fillStyle = opts.color.dark;
            
            // Generate pattern based on text hash
            const hash = this._simpleHash(text);
            
            // Draw finder patterns (corners)
            this._drawFinderPattern(ctx, margin, margin, cellSize);
            this._drawFinderPattern(ctx, size - margin - 7 * cellSize, margin, cellSize);
            this._drawFinderPattern(ctx, margin, size - margin - 7 * cellSize, cellSize);
            
            // Draw data pattern
            for (let row = 0; row < 25; row++) {
                for (let col = 0; col < 25; col++) {
                    // Skip finder patterns
                    if (this._isFinderPattern(row, col)) continue;
                    
                    // Generate pseudo-random pattern based on hash and position
                    const value = (hash + row * 31 + col * 17) % 256;
                    if (value > 128) {
                        const x = margin + col * cellSize;
                        const y = margin + row * cellSize;
                        ctx.fillRect(x, y, cellSize, cellSize);
                    }
                }
            }
            
            // Add text overlay (for demo purposes)
            if (text.length < 100) {
                ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';
                ctx.fillRect(margin + 8 * cellSize, margin + 8 * cellSize, 9 * cellSize, 9 * cellSize);
                
                ctx.fillStyle = opts.color.dark;
                ctx.font = `${Math.floor(cellSize * 0.8)}px monospace`;
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                
                const centerX = margin + 12.5 * cellSize;
                const centerY = margin + 12.5 * cellSize;
                
                // Split text into multiple lines if needed
                const lines = this._wrapText(text, 12);
                lines.slice(0, 8).forEach((line, index) => {
                    ctx.fillText(line, centerX, centerY + (index - lines.length/2 + 0.5) * cellSize);
                });
            }
            
            resolve(canvas.toDataURL());
        });
    },

    /**
     * Simple hash function for generating patterns
     */
    _simpleHash: function(str) {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            const char = str.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash; // Convert to 32-bit integer
        }
        return Math.abs(hash);
    },

    /**
     * Draw QR code finder pattern (corner squares)
     */
    _drawFinderPattern: function(ctx, x, y, cellSize) {
        // Outer border (7x7)
        ctx.fillRect(x, y, 7 * cellSize, 7 * cellSize);
        
        // Inner white (5x5)
        ctx.fillStyle = ctx.canvas.style.backgroundColor || '#FFFFFF';
        ctx.fillRect(x + cellSize, y + cellSize, 5 * cellSize, 5 * cellSize);
        
        // Center black (3x3)
        ctx.fillStyle = '#000000';
        ctx.fillRect(x + 2 * cellSize, y + 2 * cellSize, 3 * cellSize, 3 * cellSize);
    },

    /**
     * Check if position is in finder pattern area
     */
    _isFinderPattern: function(row, col) {
        return (row < 9 && col < 9) || 
               (row < 9 && col > 15) || 
               (row > 15 && col < 9);
    },

    /**
     * Wrap text into lines
     */
    _wrapText: function(text, maxLength) {
        const words = text.split(' ');
        const lines = [];
        let currentLine = '';
        
        for (const word of words) {
            if ((currentLine + word).length <= maxLength) {
                currentLine += (currentLine ? ' ' : '') + word;
            } else {
                if (currentLine) lines.push(currentLine);
                currentLine = word.length <= maxLength ? word : word.substring(0, maxLength);
            }
        }
        if (currentLine) lines.push(currentLine);
        
        return lines;
    }
};

console.log('Local QR Code generator loaded');